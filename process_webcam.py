import os

import cv2
import numpy as np
import tensorflow as tf

from PIL import Image
from object_detection.utils import label_map_util
from object_detection.utils import visualization_utils as vis_util

flags = tf.app.flags

flags.DEFINE_string(
    'model', None, 'Path to the frozen_inference_graph.pb file generated by export_inference_graph')
flags.DEFINE_string('labels', None, 'Path to labe_lmap.pbtxt')
flags.DEFINE_integer('n_classes', None, 'Number of clases')


FLAGS = flags.FLAGS

label_map = label_map_util.load_labelmap(FLAGS.labels)
categories = label_map_util.convert_label_map_to_categories(
    label_map, max_num_classes=FLAGS.n_classes, use_display_name=True)
category_index = label_map_util.create_category_index(categories)

print("LOADING GRAPH")
detection_graph = tf.Graph()
with detection_graph.as_default():
    od_graph_def = tf.GraphDef()
    with tf.gfile.GFile(FLAGS.model, 'rb') as fid:
        serialized_graph = fid.read()
        od_graph_def.ParseFromString(serialized_graph)
        tf.import_graph_def(od_graph_def, name='')

config = tf.ConfigProto(allow_soft_placement=True, log_device_placement=False)
config.gpu_options.allow_growth = True


cap = cv2.VideoCapture(0)
frame_width = int(cap.get(3))
frame_height = int(cap.get(4))

print(frame_height, frame_width)

with detection_graph.as_default():
    with tf.Session(graph=detection_graph, config=config) as sess:

        # Definite input and output Tensors for detection_graph
        image_tensor = detection_graph.get_tensor_by_name('image_tensor:0')
        # Each box represents a part of the image where a particular object was detected.
        detection_boxes = detection_graph.get_tensor_by_name(
            'detection_boxes:0')
        # Each score represent how level of confidence for each of the objects.
        # Score is shown on the result image, together with the class label.
        detection_scores = detection_graph.get_tensor_by_name(
            'detection_scores:0')
        detection_classes = detection_graph.get_tensor_by_name(
            'detection_classes:0')

        while True:
            ret, frame = cap.read()

            image_np_expanded = np.expand_dims(frame[:,:,::-1], axis=0)

            (boxes, scores, classes) = sess.run(
                [detection_boxes, detection_scores, detection_classes],
                feed_dict={image_tensor: image_np_expanded})

            vis_util.visualize_boxes_and_labels_on_image_array(
                frame,
                np.squeeze(boxes),
                np.squeeze(classes).astype(np.int32),
                np.squeeze(scores),
                category_index,
                use_normalized_coordinates=True,
                line_thickness=2)

            cv2.imshow('object detection', cv2.resize(frame, (frame_width, frame_height)))

            if cv2.waitKey(25) & 0xFF == ord('q'):
                cv2.destroyAllWindows()
                break
