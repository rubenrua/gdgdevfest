import os

import numpy as np
import tensorflow as tf

from time import time

flags = tf.app.flags

flags.DEFINE_string('model', None, 'Path to the frozen_inference_graph.pb file generated by export_inference_graph')
flags.DEFINE_integer('height', 720, 'height of the fake input image')
flags.DEFINE_integer('width', 1080, 'width of the fake input image')
flags.DEFINE_integer('n_runs', 10, 'Number of runs to compute the mean inference time')

FLAGS = flags.FLAGS

print("LOADING GRAPH")
detection_graph = tf.Graph()
with detection_graph.as_default():
    od_graph_def = tf.GraphDef()
    with tf.gfile.GFile(FLAGS.model, 'rb') as fid:
        serialized_graph = fid.read()
        od_graph_def.ParseFromString(serialized_graph)
        tf.import_graph_def(od_graph_def, name='')

config = tf.ConfigProto(allow_soft_placement=False, log_device_placement=False)

# Don't allocate all avaliable GPU
config.gpu_options.allow_growth = True

with detection_graph.as_default():
    with tf.Session(graph=detection_graph, config=config) as sess:
        # Definite input and output Tensors for detection_graph
        image_tensor = detection_graph.get_tensor_by_name('image_tensor:0')
        # Each box represents a part of the image where a particular object was detected.
        detection_boxes = detection_graph.get_tensor_by_name('detection_boxes:0')
        # Each score represent how level of confidence for each of the objects.
        # Score is shown on the result image, together with the class label.
        detection_scores = detection_graph.get_tensor_by_name('detection_scores:0')
        detection_classes = detection_graph.get_tensor_by_name('detection_classes:0')

        image_np_expanded = (np.random.rand(1, FLAGS.height, FLAGS.width, 3) * 255).astype(np.uint8)

        print("IMAGE SHAPE: {}".format(image_np_expanded.shape[1:3]))

        steps = []
        for i in range(FLAGS.n_runs + 1):
            t = time()
            (boxes, scores, classes) = sess.run(
                [detection_boxes, detection_scores, detection_classes],
                feed_dict={image_tensor: image_np_expanded})
            step = time() - t
            if i == 0:
                continue
            print("STEP {}: {}".format(i, step))
            steps.append(step)

        print("FPS: {}".format(1 / np.mean(steps)))
